name: Publish release
on:
  push:
    branches: [release/**]

permissions:
  contents: read

jobs:
  check_version_bump:
    permissions:
      contents: read
    name: Check version bump
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust toolchain stable-x86_64-unknown-linux-gnu for ubuntu-latest
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          override: true
      - name: Read source branch version
        id: source_version
        run: echo "version=$(cargo read-manifest | jq -r .version)" >> $GITHUB_OUTPUT
      - name: Update cargo index
        run: cargo search
      - name: Read crates.io version
        id: crates_io_version
        run: echo "version=$(cargo search | grep -m 1 '^rasopus-backend ' | awk '{print $2}'" >> $GITHUB_OUTPUT
      - name: Parse and compare versions
        run: |
          source_version="${{ steps.source_version.outputs.version }}"
          crates_io_version="${{ steps.crates_io_version.outputs.version }}"
          if [ "$(printf '%s\n' "$crates_io_version" "$source_version" | sort -V | head -n1)" != "$source_version" ]; then
            echo "Source branch version ($source_version) is higher than crates.io version ($crates_io_version)."
          else
            echo "Source branch version ($source_version) is not higher than crates.io version ($crates_io_version)."
            exit 1
          fi

  crates_io:
    permissions:
      contents: read
      packages: write
    name: Publish crates.io
    needs: check_version_bump
    environment: CRATES_IO
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust toolchain stable-x86_64-unknown-linux-gnu for ubuntu-latest
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          override: true
      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
      - name: Login to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}
      - name: Publish to crates.io
        uses: actions-rs/cargo@v1
        with:
          command: publish
  github:
    permissions:
      contents: write
      packages: write
    name: Publish GitHub
    needs: crates_io
    environment: GITHUB_RELEASE
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Rust toolchain stable-x86_64-unknown-linux-gnu for ubuntu-latest
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable-x86_64-unknown-linux-gnu
          override: true
      - name: Setup Cargo cache
        uses: Swatinem/rust-cache@v2
      - name: Package
        uses: actions-rs/cargo@v1
        with:
          command: package
          args: --all-features
      - name: Read crate name
        id: crate_name
        run: echo "crate_name=$(cargo read-manifest | jq -r .name)" >> $GITHUB_OUTPUT
      - name: Read version
        id: version
        run: echo "version=$(cargo read-manifest | jq -r .version)" >> $GITHUB_OUTPUT
      - name: Create release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: gh release create "${{ steps.version.outputs.version }}" --repo="$GITHUB_REPOSITORY" --title="Release ${{ steps.version.outputs.version }}" --generate-notes --latest "./target/package/${{ steps.crate_name.outputs.crate_name }}-${{ steps.version.outputs.version }}.crate"

  publish_docker:
    permissions:
      contents: read
      packages: write
    name: Publish Docker Image
    needs: crates_io
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@6524bf65af31da8d45b59e8c27de4bd072b392f5

      - name: Log in to DockerHub
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/rasopus-backend:${{ steps.source_version.outputs.version }} .
          docker push ${{ secrets.DOCKER_USERNAME }}/rasopus-backend:${{ steps.source_version.outputs.version }}